{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\n\nexport { default } from 'next-auth/middleware';\n\nexport async function middleware(request: NextRequest) {\n    const token = await getToken({ req: request, secret: process.env.NEXT_AUTH_SECRET });\n    const { pathname } = request.nextUrl;\n\n    // Public routes (accessible without login)\n    const publicRoutes = ['/login', '/signup'];\n\n    // If visiting login/signup while already logged in → go to dashboard\n    if (publicRoutes.includes(pathname) && token) {\n        return NextResponse.redirect(new URL('/dashboard', request.url));\n    }\n\n    // If visiting protected routes without token → go to login\n    if (pathname.startsWith('/dashboard') && !token) {\n        return NextResponse.redirect(new URL('/login', request.url));\n    }\n\n    // Continue request\n    return NextResponse.next();\n}\n\n// run middleware on these routes\nexport const config = {\n    matcher: ['/dashboard', '/login', '/signup'], \n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;AAEA;;;;AAEO,eAAe,WAAW,OAAoB;IACjD,MAAM,QAAQ,MAAM,CAAA,GAAA,oJAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,KAAK;QAAS,QAAQ,QAAQ,GAAG,CAAC,gBAAgB;IAAC;IAClF,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,2CAA2C;IAC3C,MAAM,eAAe;QAAC;QAAU;KAAU;IAE1C,qEAAqE;IACrE,IAAI,aAAa,QAAQ,CAAC,aAAa,OAAO;QAC1C,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAClE;IAEA,2DAA2D;IAC3D,IAAI,SAAS,UAAU,CAAC,iBAAiB,CAAC,OAAO;QAC7C,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC9D;IAEA,mBAAmB;IACnB,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAGO,MAAM,SAAS;IAClB,SAAS;QAAC;QAAc;QAAU;KAAU;AAChD"}}]
}